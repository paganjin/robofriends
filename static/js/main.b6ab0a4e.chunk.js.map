{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","intialStateSearch","intialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6ab0a4e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id}) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card \r\n              key={i} \r\n              id={robots[i].id} \r\n              name={robots[i].name} \r\n              email={robots[i].email} \r\n            />\r\n          )\r\n        })\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div  className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\" \r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border:'5px solid black', height: '800px' }}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;","import React, { Component }from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if(this.state.hasError) {\r\n      return <h1>That is not good</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\nclass App extends Component {\r\n  // constructor() {\r\n  //   super()\r\n  //   this.state = {\r\n  //     robots: []\r\n  //     // searchfield: ''\r\n  //   }\r\n  // }\r\n  // const [robots, setRobots] = useState([])\r\n  // const [searchfield, setSearchfield] = useState('')\r\n  // const [count, setCount] = useState(0)\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots()\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   fetch('https://jsonplaceholder.typicode.com/users')\r\n  //   .then(response => response.json())\r\n  //   .then(users => {setRobots(users)})\r\n  //   // console.log(count)\r\n  // },[]) // if you add count, only run if count changes.\r\n\r\n  // onSearchChange = (event) => {\r\n  //   this.setState({ searchfield: event.target.value })\r\n  // }\r\n\r\n  render() {\r\n    // const { robots } = this.state\r\n    const { searchField, onSearchChange, robots, isPending } = this.props\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    })\r\n    \r\n    return isPending ? \r\n      <h1>Loading</h1> : \r\n      (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f1\">RoboFriends</h1>\r\n          {/* <button onClick={() => setCount(count+1)}>Click me!</button> */}\r\n          <SearchBox searchChange={onSearchChange}/>\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nconst intialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=intialStateSearch, action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload })\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nconst intialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state=intialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true })\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPending: false })\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}